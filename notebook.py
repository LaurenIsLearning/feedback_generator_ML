# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LQcnuPY5MQ5K5LQI-5o5py56riOTAC33

# Main Feedback Generation Notebook
This notebook handles preprocessing, model interaction, and feedback generation.

**--Set up: Github, Paths, Imports**
"""

# Commented out IPython magic to ensure Python compatibility.
# Mount Google Drive (optional, you'll get a prompt to authorize account)
# from google.colab import drive
# drive.mount('/content/drive')

# Start in root Colab directory to avoid nesting
# %cd /content

# Clone your GitHub repo (replace with your actual repo URL)
!git clone https://github.com/ML-name/project.git
# %cd project

# List all branches (optional, for checking)
# !git branch -a

# Checkout YOUR branch (!!replace "your-branch-name"!!)
!git checkout -b model/prompting origin/model/prompting

"""**--Install required libraries**"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -r requirements.txt --quiet

# Add src folder to python path to edit python files
import sys
sys.path.append('/content/project/')

from google.colab import userdata
import os
openai_key = userdata.get("OPENAI_API_KEY")
os.environ["OPENAI_API_KEY"] = openai_key

"""**--Import modules (youre working on)**
<br>*each of our classes will be what will merge to this notebook (im p sure)*
<br>only loads what you explicitly request
<br>(this helps keep memory low and import fast)
<br> *the following is an example with my Rubric module*
"""

!pip install --upgrade openai --quiet

from tropos import StudentSubmission
from tropos.models import gpt
from tropos.docx_writer import write_feedback_to_docx
from utils.feedback_formatting import format_feedback_blocks
import os

#load first submission with cached requirements
requirements_path = "/content/project/data/raw/Requirements.docx"
exampleStudent1part1 = StudentSubmission("/content/project/data/raw/Student_1/Student_1_Part_1.docx", requirements_path)

#----one student across multiple parts
exampleStudent1part2 = StudentSubmission("/content/project/data/raw/Student_1/Student_1_Part_2.docx", requirements_path)
exampleStudent1part3 = StudentSubmission("/content/project/data/raw/Student_1/Student_1_Part_3.docx", requirements_path)
exampleStudent1partfinal = StudentSubmission("/content/project/data/raw/Student_1/Student_1_Final.docx", requirements_path)

#----diff students part1
exampleStudent2part1 = StudentSubmission("/content/project/data/raw/Student_2/Student_2_Part_1.docx", requirements_path)
exampleStudent3part1 = StudentSubmission("/content/project/data/raw/Student_3/Student_3_Part_1.docx", requirements_path)
exampleStudent4part1 = StudentSubmission("/content/project/data/raw/Student_4/Student_4_Part_1.docx", requirements_path)
exampleStudent5part1 = StudentSubmission("/content/project/data/raw/Student_5/Student_5_Part_1.docx", requirements_path)

#--target papers (uncommented/raw)
target1 = StudentSubmission("/content/project/data/unmarked_raw/Uncommented_Student_1.docx", requirements_path)
target2 = StudentSubmission("/content/project/data/unmarked_raw/Uncommented_Student_2.docx", requirements_path)
target3 = StudentSubmission("/content/project/data/unmarked_raw/Uncommented_Student_3.docx", requirements_path)
target4 = StudentSubmission("/content/project/data/unmarked_raw/Uncommented_Student_4.docx", requirements_path)


#promot example sets
oneshot_example = exampleStudent1part1
fewshot_same_student = [
    exampleStudent1part1,
    exampleStudent1part2,
    exampleStudent1part3,
    exampleStudent1partfinal
]
fewshot_diff_part1 = [
    exampleStudent1part1,
    exampleStudent2part1,
    exampleStudent3part1,
    exampleStudent4part1,
    #exampleStudent5part1
]

#list of targets
targets = [
    ("Student1", target1),
    ("Student2", target2),
    ("Student3", target3),
    ("Student4", target4)
]

#prompt builder functions
from tropos.models.gpt import (
    build_zeroshot_prompt,
    build_oneshot_prompt,
    build_fewshot_prompt
)

#define prompt variants
prompt_variants = [
    ("ZeroShot", build_zeroshot_prompt),
    ("OneShot", lambda t: build_oneshot_prompt(
        oneshot_example, t)),
    ("FewShotSameStudent", lambda t: build_fewshot_prompt(
        fewshot_same_student, t)),
    ("FewShotDiffStudents", lambda t: build_fewshot_prompt(
        fewshot_diff_part1, t)),
]


#run all combos
for target_label, target in targets:
    for variant_label, builder in prompt_variants:
        print(f"\nðŸ§  Generating {variant_label} feedback for {target_label}...")
        prompt = builder(target)
        feedback = gpt.call_chatgpt(prompt)

        print(f"\n--- {variant_label} Feedback for {target_label} ---\n")
        format_feedback_blocks(feedback, width=80)

        output_path = f"/content/project/data/generated_output/{variant_label}_{target_label}.docx"
        write_feedback_to_docx(
            submission_path=target.submission_path,
            feedback_text=feedback,
            output_path=output_path
        )

        print(f"âœ… Saved to {output_path}")

import shutil
import os
shutil.make_archive('/content/folder_name', 'zip', '/content/project/data/generated_output')

from google.colab import files
files.download('/content/folder_name.zip')