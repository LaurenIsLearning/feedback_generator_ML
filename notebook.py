# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uCATOAaJEKGIOoq3Tjn6qJelkQVIWfYh

# Main Feedback Generation Notebook
This notebook handles preprocessing, model interaction, and feedback generation.

**--Set up: Github, Paths, Imports**
"""

# Commented out IPython magic to ensure Python compatibility.
# Mount Google Drive (optional, you'll get a prompt to authorize account)
# from google.colab import drive
# drive.mount('/content/drive')

# Start in root Colab directory to avoid nesting
# %cd /content

# Clone your GitHub repo (replace with your actual repo URL)
!git clone https://github.com/ML-name/project.git
# %cd project

# List all branches (optional, for checking)
!git branch -a

# Checkout YOUR branch (!!replace "your-branch-name"!!)
!git checkout -b scraping/inline_feedback origin/scraping/inline_feedback

# Add your src folder to the Python path
import sys
sys.path.append('/content/project/')

# import data path for loading files
import os
# Base data directory
data_base = '/content/project/data'
# Paths to specific subfolders
raw_data_path = os.path.join(data_base, 'raw')
processed_data_path = os.path.join(data_base, 'processed')

"""**--Install required libraries**"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -r requirements.txt
!pip install python-docx

import sys
import os
import re
import json
from pathlib import Path
from google.colab import drive

# Mount Google Drive (uncomment if needed)
# drive.mount('/content/drive')

# Set up paths
ROOT = '/content/project'
sys.path.append(ROOT)

# Import after adding to path
from tropos.preprocess_docx.comments import Comments

# Configure paths
raw_dir = f"{ROOT}/data/raw/"
processed_dir = f"{ROOT}/data/processed/student_submissions/"

def process_student_submissions():
    """Process all student submissions and save comments to structured directories."""
    # Create processed directory if needed
    Path(processed_dir).mkdir(parents=True, exist_ok=True)

    all_comments = {}  # Master dictionary for backup

    for student_folder in os.listdir(raw_dir):
        student_path = os.path.join(raw_dir, student_folder)

        if not os.path.isdir(student_path):
            continue

        print(f"\nProcessing {student_folder}...")

        for filename in os.listdir(student_path):
            if not filename.endswith('.docx'):
                continue

            # Parse student number and part number
            student_num = re.search(r'Student[ _](\d+)', filename, re.IGNORECASE)
            part_info = re.search(r'(Part[ _]?(\d+)|Final)', filename, re.IGNORECASE)

            if not student_num or not part_info:
                print(f"  Skipping {filename} - couldn't parse info")
                continue

            # Standardize naming
            student_key = f"Student_{student_num.group(1).zfill(2)}"
            part_key = part_info.group(0).lower().replace(' ', '')

            # Set up target path
            target_dir = os.path.join(processed_dir, student_key)
            Path(target_dir).mkdir(exist_ok=True)

            target_path = os.path.join(target_dir, f"{part_key}.json")
            doc_path = os.path.join(student_path, filename)

            # Extract and save comments
            try:
                comments = Comments(doc_path).parse_comments().get_results()

                with open(target_path, 'w') as f:
                    json.dump(comments, f, indent=2)

                # Update master record
                if student_key not in all_comments:
                    all_comments[student_key] = {}
                all_comments[student_key][part_key] = comments

                print(f"  Processed: {filename} â†’ {target_path}")

            except Exception as e:
                print(f"  Error processing {filename}: {str(e)}")



    print(f"\nProcessing complete!")

# Run the processing
process_student_submissions()

"""**--Import modules (youre working on)**
<br>*each of our classes will be what will merge to this notebook (im p sure)*
<br>only loads what you explicitly request
<br>(this helps keep memory low and import fast)
<br> *the following is an example with my Rubric module*
"""

# Import and call main functionfrom tropos import main
main()