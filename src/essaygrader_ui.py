# -*- coding: utf-8 -*-
"""EssayGrader-UI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m-MtKyUxaYlmv2vjKHoEYS2hYVaotcsO
"""

#install gradio
!pip install gradio
!pip install langchain_openai
!pip install gradio_client
!pip install openai

import gradio as gr
import json

# Define InputFields and OutputFields classes
class InputFields:
    def __init__(self):
        self._student_id = None
        self._assignment_id = None
        self._requirements_input = None
        self._student_essay = None

    # getters
    def get_student_id(self):
        return self._student_id

    def get_assignment_id(self):
        return self._assignment_id

    def get_requirements_input(self):
        return self._requirements_input

    def get_student_essay(self):
        return self._student_essay

    #setters
    def set_student_id(self, value):
        self._student_id = value

    def set_assignment_id(self, value):
        self._assignment_id = value

    def set_requirements_input(self, value):
        self._requirements_input = value

    def set_student_essay(self, value):
        self._student_essay = value

    #adder methods (builder method)
    def add_student_id(self, value):
        self._student_id = value
        return self

    def add_assignment_id(self, value):
        self._assignment_id = value
        return self

    def add_requirements_input(self, value):
        self._requirements_input = value
        return self

    def add_student_essay(self, value):
        self._student_essay = value
        return self

    # JSON parsing and serialization
    @staticmethod
    def from_json(json_str):
        data = json.loads(json_str)
        obj = InputFields()
        obj.set_student_id(data.get("StudentID"))
        obj.set_assignment_id(data.get("AssignmentID"))
        obj.set_requirements_input(data.get("Requirements Input"))
        obj.set_student_essay(data.get("Student Essay"))
        return obj

    def to_json(self):
        return json.dumps({
            "StudentID": self._student_id,
            "AssignmentID": self._assignment_id,
            "Requirements Input": self._requirements_input,
            "Student Essay": self._student_essay
        }, indent=4)

class OutputFields:
    def __init__(self):
        self._student_id = None
        self._assignment_id = None
        self._text_snippet = None
        self._feedback = None
        self._feedback_type = None

    # Getters
    def get_student_id(self):
        return self._student_id

    def get_assignment_id(self):
        return self._assignment_id

    def get_text_snippet(self):
        return self._text_snippet

    def get_feedback(self):
        return self._feedback

    def get_feedback_type(self):
        return self._feedback_type

    # Setters
    def set_student_id(self, value):
        self._student_id = value

    def set_assignment_id(self, value):
        self._assignment_id = value

    def set_text_snippet(self, value):
        self._text_snippet = value

    def set_feedback(self, value):
        self._feedback = value

    def set_feedback_type(self, value):
        self._feedback_type = value

    # Builder methods (adders)
    def add_student_id(self, value):
        self._student_id = value
        return self

    def add_assignment_id(self, value):
        self._assignment_id = value
        return self

    def add_text_snippet(self, value):
        self._text_snippet = value
        return self

    def add_feedback(self, value):
        self._feedback = value
        return self

    def add_feedback_type(self, value):
        self._feedback_type = value
        return self

    # JSON parsing and serialization
    @staticmethod
    def from_json(json_str):
        data = json.loads(json_str)
        obj = OutputFields()
        obj.set_student_id(data.get("Student ID"))
        obj.set_assignment_id(data.get("Assignment ID"))
        obj.set_text_snippet(data.get("Text Snippet"))
        obj.set_feedback(data.get("Feedback"))
        obj.set_feedback_type(data.get("FeedbackType"))
        return obj

    def to_json(self):
        return json.dumps({
            "Student ID": self._student_id,
            "Assignment ID": self._assignment_id,
            "Text Snippet": self._text_snippet,
            "Feedback": self._feedback,
            "FeedbackType": self._feedback_type
        })


# Dummy feedback
def generate_feedback(input_text):
    #filler code
    return f"Feedback for: {input_text}"


# Custom CSS for styling
css_styling = """
h1 {
    font-family: 'Helvetica', sans-serif;
    color: #4CAF50;
    text-align: center;
}
.gradio-container {
    font-family: 'Helvetica', sans-serif;
    text-align: center;
}
.gradio-textbox {
    font-family: 'Helvetica', sans-serif;
    text-align: center;
    font-size: 16px;
}
.gradio-button {
    font-family: 'Helvetica', sans-serif;
    text-align: center;
    font-size: 16px;
    background-color: #4CAF50;
    color: white;
}
.gradio-button:hover {
    background-color: #45a049;
    color: orange;
}
.gradio-button:active {
    background-color: #3e8e3c;
    color: white;
}
.hidden {
    display: none;
}
.expanded {
    height: 300px !important;
}
"""
def reset_interface():
    return (
        gr.update(value="", visible=True),  #essay textbox
        gr.update(value="", visible=True),  # requirements
        gr.update(value="", visible=True),  # student ID
        gr.update(value="", visible=True),  # assignment ID
        gr.update(value="", visible=False),  #feedback
        gr.update(value="", visible=False),  # inline feedback 1
        gr.update(value="", visible=False),  # inline feedback 2
        gr.update(value="", visible=False),   #inline feedback 3
        gr.update(visible=False)
    )


def submit_button_updates(essay, requirements, student_id, assignment_id):
    input_data = InputFields() \
        .add_student_id(student_id) \
        .add_assignment_id(assignment_id) \
        .add_requirements_input(requirements) \
        .add_student_essay(essay)

    feedback = generate_feedback(input_data.get_student_essay())#feedback

    output_data = OutputFields() \
        .add_student_id(input_data.get_student_id()) \
        .add_assignment_id(input_data.get_assignment_id()) \
        .add_text_snippet(input_data.get_student_essay()) \
        .add_feedback(feedback) \
        .add_feedback_type("Constructive")  #feedback type

    return (
        gr.update(visible=False),  #essay input
        gr.update(visible=False),  #rubric/requirements
        gr.update(visible=False),  #student ID
        gr.update(visible=False),  #assignment ID
        gr.update(value=output_data.get_feedback(), visible=True, lines=10),  #feedback
        gr.update(visible=False),  #inline feedback 1
        gr.update(visible=False),  #inline feedback 2
        gr.update(visible=False),   #inline feedback 3
        gr.update(visible=True)   #inline button
    )
def show_inline_feedback(essay, requirements, student_id, assignment_id):
    input_data = InputFields() \
        .add_student_id(student_id) \
        .add_assignment_id(assignment_id) \
        .add_requirements_input(requirements) \
        .add_student_essay(essay)

    feedback = generate_feedback(input_data.get_student_essay())#feedback

    output_data = OutputFields() \
        .add_student_id(input_data.get_student_id()) \
        .add_assignment_id(input_data.get_assignment_id()) \
        .add_text_snippet(input_data.get_student_essay()) \
        .add_feedback(feedback) \
        .add_feedback_type("Constructive")  #feedback type
    return (
        gr.update(visible=False),  #essay input
        gr.update(visible=False),  #rubric/requirements
        gr.update(visible=False),  #student ID
        gr.update(visible=False),  #assignment ID
        gr.update(value=output_data.get_feedback(), visible=True, lines=10),  #feedback
        gr.update(visible=True),  #inline feedback 1
        gr.update(visible=True),  #inline feedback 2
        gr.update(visible=True),   #inline feedback 3
        gr.update(visible=True)   #inline button
  )

with gr.Blocks(css=css_styling) as demo:

    gr.Markdown("# üìù Tropos Essay Grader")
    question_textbox = gr.Textbox(label="Input Essay Contents Here: ", interactive=True, value="", lines=10)
    requirements_input = gr.Textbox(label="Rubric / Requirements: ", interactive=True, value="", lines=3)

    with gr.Row():
        student_id_textbox = gr.Textbox(label="Student ID: ", interactive=True, value="", lines=1)
        assignment_id_textbox = gr.Textbox(label="Assignment ID: ", interactive=True, value="", lines=1)

    with gr.Row():
        sent_button = gr.Button(value="üì§ Submit Essay", variant="primary")
        reset_button = gr.Button(value="üîÑ Reset", variant="secondary")

    feedback_textbox = gr.Textbox(label="Essay Feedback", interactive=False, value="", lines=5, visible=False)
    inline_button = gr.Button(value="Get Inline Feedback", variant="primary", visible=False)


    with gr.Row():
        inline_textbox1 = gr.Textbox(label="Inline Feedback", interactive=False, value="", lines=3, visible=False)
        inline_textbox2 = gr.Textbox(label="Inline Feedback", interactive=False, value="", lines=3, visible=False)
        inline_textbox3 = gr.Textbox(label="Inline Feedback", interactive=False, value="", lines=3, visible=False)

    sent_button.click(
        submit_button_updates,
        inputs=[question_textbox, requirements_input, student_id_textbox, assignment_id_textbox],
        outputs=[question_textbox, requirements_input, student_id_textbox, assignment_id_textbox, feedback_textbox, inline_textbox1, inline_textbox2, inline_textbox3, inline_button],
    )

    reset_button.click(
        reset_interface,
        inputs=[],  # clear inputs
        outputs=[question_textbox, requirements_input, student_id_textbox, assignment_id_textbox, feedback_textbox, inline_textbox1, inline_textbox2, inline_textbox3, inline_button]
    )
    inline_button.click(
        show_inline_feedback,
<<<<<<< Updated upstream
        inputs=[],
=======
        inputs=[question_textbox, requirements_input, student_id_textbox, assignment_id_textbox],
>>>>>>> Stashed changes
        outputs=[question_textbox, requirements_input, student_id_textbox, assignment_id_textbox, feedback_textbox, inline_textbox1, inline_textbox2, inline_textbox3, inline_button]
        )

# Launch the interface
demo.launch(debug = True)